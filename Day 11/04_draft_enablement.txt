1 - Enable the draft handling in the base business object
with draft;

2. Provide the draft table name
draft table zabc_travel_new

3. Use total etag for disposable lock
total etag Lastchangedat

4. Mark Draft Enablement for associated entity
association _Booking { create; with draft; }

5. Mention draft table for booking entity
draft table zabc_book_new

6. Enable draft management by parent association
association _Travel { with draft; }

7. Maintain validations for draft enablement
draft determine action Prepare
  {
    validation validateCustomer;
    validation validateDates;
    validation validateStatus;
  }

--Go to projection layer
8. Enable Draft exposure to projection layer
projection;
use draft;

9. Expose Association with draft on booking
use association _Booking { create; with draft;}

10. Parent association draft exposure
use association _Travel {with draft;}



--Complete code


managed implementation in class zbp_i_mt_xx_travel_m unique;
strict ( 2 );
with draft;

define behavior for ZI_MT_XX_TRAVEL_M alias Travel
persistent table /DMO/TRAVEL
draft table zmtxx_m_travel
lock master
total etag Lastchangedat
authorization master ( global )
etag master Lastchangedat
{
    // administrative fields: read only
  field ( readonly ) lastchangedat, lastchangedby, createdat, createdby;

  // mandatory fields that are required to create a travel
  field ( mandatory ) agencyid, status, bookingfee, currencycode;

  // dynamic field control
  field (features : instance ) travelid, AgencyId;

  create;
  update;
  delete;

    draft action Edit;
    draft action Activate;
    draft action Discard;
    draft action Resume;
    draft determine action Prepare{
        validation validateCustomer ;
        validation validateDates ;
        validation validateStatus ;
    }

   validation validateCustomer on save { field customerid; create; }
  validation validateDates on save  { field begindate, enddate; create; }
  validation validateStatus on save { field status; }

  factory action createTravelByTemplate [1] ;

  // dynamic action control
  action  ( features: instance ) acceptTravel result [1] $self;
  action  ( features: instance ) rejectTravel result [1] $self;

  association _Booking { create;  with draft;}

  mapping for /dmo/travel{
     TravelID           = travel_id;
     AgencyID           = agency_id;
     CustomerID         = customer_id;
     BeginDate          = begin_date;
     EndDate            = end_date;
     BookingFee         = booking_fee;
     TotalPrice         = total_price;
     CurrencyCode       = currency_code;
     Memo               = description;
     Status             = status;
     CreatedBy          = createdby;
     CreatedAt          = createdat;
     LastChangedBy      = lastchangedby;
     LastChangedAt      = lastchangedat;
  }
}

define behavior for ZI_MT_XX_BOOKING_M alias Booking
persistent table /dmo/booking
draft table zmtxxm_book
lock dependent by _Travel
authorization dependent by _Travel
//etag master <field_name>
{

    // static field control
  field ( mandatory ) carrierid, connectionid, flightdate;

  // dynamic field control
  field (features : instance ) bookingid, bookingdate, customerid;

   determination calculateTotalFlightPrice on modify { field flightprice, currencycode; create; }

  update;
  delete;
  field ( readonly ) TravelId;
  association _Travel { with draft; }

  mapping for /dmo/booking{
     BookingID          = booking_id;
     TravelId           = travel_id;
     BookingDate        = booking_date;
     CustomerID         = customer_id;
     CarrierID          = carrier_id;
     ConnectionID       = connection_id;
     FlightDate         = flight_date;
     FlightPrice        = flight_price;
     CurrencyCode       = currency_code;
  }
}


---Projection layer code

projection;
strict ( 2 );
use draft;

define behavior for ZC_MT_XX_TRAVEL_PROCESSOR_M  alias Travel
{
  use create;
  use update;
  use delete;
  use action Edit;
    use action Activate;
    use action Discard;
    use action Resume;
    use action Prepare;
   use action createTravelByTemplate;
  use association _Booking { create;  with draft;}
}

define behavior for ZC_MT_XX_BOOKING_PROCESSOR_M alias Booking
{
  use update;
  use delete;

  use association _Travel { with draft;}
}
