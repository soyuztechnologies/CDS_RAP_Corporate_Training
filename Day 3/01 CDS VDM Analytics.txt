@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Product text, private'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@VDM.private: true
@VDM.viewType: #BASIC
@ObjectModel.dataCategory: #TEXT
define view entity ZP_MT_XX_PROD_TXT as select from snwd_texts {
    key node_key as NodeKey,
    parent_key as ParentKey,
    language as Language,
    text as Text
}



@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Product, Basic, Interface'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@VDM.viewType: #BASIC --The view type VDM
@Analytics: { dataCategory: #DIMENSION, --Analytical purpose
              dataExtraction.enabled: true } --The usage is allowed
@ObjectModel.representativeKey: 'ProductId' --Analytic tool to know what is the key of dimension              

define view entity ZI_MT_XX_PRODUCT as select from snwd_pd 
association[1] to ZP_MT_XX_PROD_TXT as _ProductText
on $projection.DescGuid = _ProductText.ParentKey
{
   key snwd_pd.node_key as NodeKey,
   snwd_pd.product_id as ProductId,
   snwd_pd.category as Category,
   snwd_pd.desc_guid as DescGuid,
   _ProductText
}



@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Customer Basic, Interface'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@VDM.viewType: #BASIC
@Analytics: {
                dataCategory: #DIMENSION,
                dataExtraction.enabled: true
}
@ObjectModel.representativeKey: 'BpId'

define view entity ZI_MT_XX_CUSTOMER as select from snwd_bpa as Bpa 
association[1] to snwd_ad as _Address on
$projection.AddressGuid = _Address.node_key
{
    key Bpa.node_key as NodeKey,
    Bpa.bp_role as BpRole,
    Bpa.bp_id as BpId,
    Bpa.company_name as CompanyName, 
    address_guid as AddressGuid,
    _Address.country as Country 
} where bp_role = '01'



@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Sales Pure Transactiom Basic Interface'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@VDM.viewType: #BASIC
@Analytics: { dataCategory: #FACT,
              dataExtraction.enabled: true }  
define view entity ZI_MT_XX_SALES as select from snwd_so_i as items
association[1] to snwd_so as _Header on
$projection.ParentKey = _Header.node_key
{
    key node_key as NodeKey,
    parent_key as ParentKey,
    product_guid as ProductGuid,
    items.currency_code as CurrencyCode,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    items.gross_amount as GrossAmount,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    items.net_amount as NetAmount,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    items.tax_amount as TaxAmount,
    _Header.buyer_guid as BuyerGuid    
}


@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Composite view product and sales'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@VDM.viewType: #COMPOSITE
@Analytics: { dataCategory: #FACT, dataExtraction.enabled: true }

define view entity ZI_MT_XX_SLS_PRD as select from ZI_MT_XX_SALES as sls 
association[1] to ZI_MT_XX_PRODUCT as _Product
on $projection.ProductGuid = _Product.NodeKey
{
    key NodeKey,
    ParentKey,
    ProductGuid,
    CurrencyCode,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    GrossAmount,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    NetAmount,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    TaxAmount,
    BuyerGuid,
    _Product
}


@AbapCatalog.viewEnhancementCategory: [#NONE]
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Composite View, Interface, Cube'
@Metadata.ignorePropagatedAnnotations: true
@ObjectModel.usageType:{
    serviceQuality: #X,
    sizeCategory: #S,
    dataClass: #MIXED
}
@VDM.viewType: #COMPOSITE
@Analytics.dataCategory: #CUBE
define view entity ZI_MT_XX_SALES_CUBE as select from ZI_MT_XX_SLS_PRD as sales
association[1] to ZI_MT_XX_CUSTOMER as _Customer on
$projection.BuyerGuid = _Customer.NodeKey
{
    key NodeKey,
    ParentKey,
    ProductGuid,
    CurrencyCode,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    @DefaultAggregation: #SUM
    GrossAmount,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    @DefaultAggregation: #SUM
    NetAmount,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    @DefaultAggregation: #SUM
    TaxAmount,
    BuyerGuid,
    /* Associations */
    _Product.Category as ProductCategory,
    _Product._ProductText[Language='E'].Text,
    _Customer.CompanyName,
    _Customer.Country
}



@AbapCatalog.sqlViewName: 'ZCMT_XXSLSANA'
@AbapCatalog.compiler.compareFilter: true
@AbapCatalog.preserveKey: true
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Consumption for Sales Anlytics'
@VDM.viewType: #CONSUMPTION
@Analytics.query: true
define view ZC_MT_XX_SLS_ANALYTICS as select from ZI_MT_XX_SALES_CUBE {
    key ProductCategory,
    key Text,
    @AnalyticsDetails.query.axis: #ROWS
    @Consumption.filter.selectionType: #RANGE
    key CompanyName,
    key Country,
    @AnalyticsDetails.query.axis: #COLUMNS
    @Consumption.filter.selectionType: #SINGLE
    key CurrencyCode,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    @AnalyticsDetails.query.axis: #COLUMNS
    GrossAmount,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    @Consumption.hidden: true
    NetAmount,
    @Semantics.amount.currencyCode: 'CurrencyCode'
    @Consumption.hidden: true
    TaxAmount,
    @AnalyticsDetails.query.axis: #COLUMNS
    @EndUserText.label: 'Donations'
    @DefaultAggregation: #FORMULA
    GrossAmount - TaxAmount  as Donations
}


